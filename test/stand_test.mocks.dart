// Mocks generated by Mockito 5.4.4 from annotations
// in weasel/test/stand_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:weasel/src/laserstorm/weapon.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Weapon].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeapon extends _i1.Mock implements _i2.Weapon {
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.WeaponType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.WeaponType.gp,
        returnValueForMissingStub: _i2.WeaponType.gp,
      ) as _i2.WeaponType);

  @override
  set type(_i2.WeaponType? _type) => super.noSuchMethod(
        Invocation.setter(
          #type,
          _type,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get range => (super.noSuchMethod(
        Invocation.getter(#range),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set range(int? _range) => super.noSuchMethod(
        Invocation.setter(
          #range,
          _range,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get impact => (super.noSuchMethod(
        Invocation.getter(#impact),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set impact(int? _impact) => super.noSuchMethod(
        Invocation.setter(
          #impact,
          _impact,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get shots => (super.noSuchMethod(
        Invocation.getter(#shots),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set shots(int? _shots) => super.noSuchMethod(
        Invocation.setter(
          #shots,
          _shots,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get traits => (super.noSuchMethod(
        Invocation.getter(#traits),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  set traits(List<String>? _traits) => super.noSuchMethod(
        Invocation.setter(
          #traits,
          _traits,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double rangeCost() => (super.noSuchMethod(
        Invocation.method(
          #rangeCost,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double impactCost() => (super.noSuchMethod(
        Invocation.method(
          #impactCost,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double shotsCost() => (super.noSuchMethod(
        Invocation.method(
          #shotsCost,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double cost() => (super.noSuchMethod(
        Invocation.method(
          #cost,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}
